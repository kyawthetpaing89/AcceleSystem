@model Models.Print_GenkaModel
@{
    ViewBag.Title = "Print_Genka";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bootstrap-textbox.css")" />
}
<div id="divMain" class="container-fluid">
    <div class="content">
        <div class="p-5 row shadow" style="box-shadow: 0 .1rem .4rem rgba(0,0,0,.1) !important; background:white; border-radius:5px;">
            <div class="col-xs-12 col-md-4"></div>
            <div class="col-xs-12 col-md-5">
                <div>
                    <h2 class=" hr-text text-center">原価集計表</h2>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <input type="text" tabindex="1" class="text-line col-xl-5 text-left" id="targetyear" onkeydown="KeyDown(event,this)" maxlength="4" placeholder="対象年度">
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <input type="text" tabindex="2" class="text-line col-xl-5 text-left" id="BrandCD" name="brandcd" onkeydown="KeyDown(event,this,'BrandCheck')" maxlength="6" style="width:140px;" placeholder="ブランド名">
                            <label id="brandname"><b>ブランド表示</b></label>
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <label id="text" style="padding-right:20px;">シーズン</label>
                            <input type="checkbox" tabindex="3" id="allyear" name="chk" onkeydown="KeyDown(event,this)" checked>
                            <label for="allyear" style="padding-right:20px!important;">通年</label>
                            <input type="checkbox" tabindex="4" id="SS" name="chk" onkeydown="KeyDown(event,this)">
                            <label for="SS" style="padding-right:20px!important;">SS</label>
                            <input type="checkbox" tabindex="5" id="FW" name="chk" onkeydown="KeyDown(event,this)">
                            <label for="FW" style="padding-right:20px!important;">FW</label>
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <label id="text" style="padding-right:20px;">プロジェクト</label>
                            <input type="text" tabindex="6" class="text-line col-xl-5 text-left" id="ProjectCD" name="projectcd" onkeydown="KeyDown(event,this)" maxlength="10" style="width:90px;" required placeholder="入力">
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <label id="text" style="padding-right:116px;"></label>
                            <input type="text" id="projectName" tabindex="7" class="text-line col-xl-5 text-left" onkeydown="KeyDown(event,this)" required placeholder="入力" maxlength="60">
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <label id="text" style="padding-right:20px;">納品状況</label>
                            <input type="checkbox" tabindex="8" id="allyear" name="chk" onkeydown="KeyDown(event,this)" checked>
                            <label for="allyear" style="padding-right:20px!important;">納品残あり</label>
                            <input type="checkbox" tabindex="9" id="SS" name="chk" onkeydown="KeyDown(event,this)">
                            <label for="SS" style="padding-right:20px!important;">完納</label>
                        </div>
                    </div>
                </div>
                <div class="pt-3 md-form" style="padding-top:1.2rem!important;">
                    <div class="col-xs-12" style="padding-left:110px;">
                        <div class="text-s text-custom1 text-uppercase mb-1">
                            <button id="btnGenerate" tabindex="10" onclick="btnGenerateClick()" class="btn btn-dark col-xl-5 text-center">処理実行</button>
                            &nbsp;&nbsp;&nbsp;&nbsp;
                            @*<button id="btnCancel" tabindex="11" onclick="btnCancelClick()" class="btn btn-primary col-xl-5 text-center">戻る</button>*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-md-3"></div>
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#formtitle").text("原価集計表");
            $("#targetyear").attr('disabled', 'disabled');
            $("#BrandCD").focus();
            var Mode = '@Model.Mode';
            if (Mode == 'New') {
               // $('#btnGenerate').html('登録');

                @*RequiredCheck($("#targetyear"));
                DoubleByteCheck($("#targetyear"), '@Url.Action("DoubleByte_Checking", "api/CommonApi")');
                YearCheck($("#targetyear"), '@Url.Action("Year_Checking", "api/CommonApi")');*@

                //RequiredCheck($("#BrandCD"));
                DoubleByteCheck($("#BrandCD"), '@Url.Action("DoubleByte_Checking", "api/CommonApi")');
                ExistsCheck($("#BrandCD"), "Brand", '@Url.Action("M_Brand_ExistsCheck", "api/Print_GenkaApi")', "brandname");

                //RequiredCheck($("#projectCD"));
                DoubleByteCheck($("#ProjectCD"), '@Url.Action("DoubleByte_Checking", "api/CommonApi")');
                ExistsCheck($("#ProjectCD"), "Project", '@Url.Action("M_Project_ExistsCheck", "api/Print_GenkaApi")', "projectName");

                ShowTargetYear();
            }
        });

        function ShowTargetYear() {
            var Pmodel = {
                TargetYear: $("#targetyear").val(),
            };

            var data = CalltoApiController('@Url.Action("M_Contrl_Year_ExitCheck", "api/Print_GenkaApi")', Pmodel);
            var controldata = JSON.parse(data);
            //alert(controldata[0].FiscalYear);
            if (controldata[0].FiscalYear) 
                $("#targetyear").val(controldata[0].FiscalYear);
            else
                ShowErrorMessage("E101");
        }

        function BrandCheck(result) {    // Make bold to BrandName after databind
            if (result == 'OK') {
                $("#brandname").css("font-weight", "Bold");
            }
            else $("#brandname").text('ブランド表示');
            $("#brandname").css("font-weight", "Bold");
         }

        function btnGenerateClick(){
            var allyear = $("#allyear").is(":checked");
            var ss = $("#SS").is(":checked");
            var fw = $("#FW").is(":checked");
            if (!allyear && !ss && !fw) {
                $("#FW").focus();
                var data = ShowErrorMessage("E111");
                return data;
            }
           else {
                var res = ErrorCheckOnSave();
                if (res == "0") {
                    var pmodel = {
                        TargetYear: $('#targetyear').val(),
                        BrandCD: $('#BrandCD').val(),
                        ProjectName: $('#projectName').val(),
                        //Season:
                        //ProjectCD:
                        //DeliveryStatus:
                    };
                     if ($('#allyear').is(':checked'))
                         pmodel.Season = "1";
                         else if ($('#SS').is(':checked'))
                         pmodel.Season = "2";
                         else if ($('#FW').is(':checked'))
                         pmodel.Season = "3";
                    var data = CalltoApiController('@Url.Action("Print_GenkaCSV", "api/Print_GenkaApi")', pmodel);
                    var csv = JSON2CSV(data);
                    var downloadLink = document.createElement("a");
                    var blob = new Blob(["\ufeff", csv]);
                    var url = URL.createObjectURL(blob);
                    downloadLink.href = url;
                    downloadLink.download = "原価集計表.csv";

                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    Swal.fire({
                        icon: 'success',
                        title: 'I204',
                        text: 'EXCEL出力が完了しました',
                    })
                    $("#BrandCD").val('');
                    $("#ProjectCD").val('');
                    $("#projectName").val('');
                    $("#brandname").text('ブランド表示');
                    $("#brandname").css("font-weight", "Bold");
                    ShowTargetYear();
                }
                else {
                    $("#BrandCD").focus();
                    ShowErrorMessage(res);
                }
            }
        }
            
       
        //Convert Jsonstring to csv
        function JSON2CSV(objArray) {
            var array = typeof JSONString != 'object' ? JSON.parse(objArray) : JSONString;
            var fields = Object.keys(array[0])
            var replacer = function (key, value) { return value === null ? null : value }
            var csv = array.map(function (row) {
                return fields.map(function (fieldName) {
                    return JSON.stringify(row[fieldName], replacer)
                }).join(',')
            })
            csv.unshift(fields.join(',')) // add header column
            csv = csv.join('\r\n');
            return csv;
        }                     

        $('#btnGenerate').keydown(function (e) {
            var code = e.keyCode || e.which;
            if (code == 9) {
                if (e.shiftKey) {
                    //Focus previous input
                    if (thisTab == startIndex) {
                        $("." + tabLimitInID).find('[tabindex=' + lastIndex + ']').focus();
                        return false;
                    }
                    else {
                        e.preventDefault();
                    }
                }
                e.preventDefault();
            }
        });
    </script>
}